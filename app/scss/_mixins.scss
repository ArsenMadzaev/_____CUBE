
// Помощник чтобы не было оч маленьких значений
@function stripUnit($value) {
  @return calc($value / ($value * 0 + 1px));
}
// PX TO REM
@function rem($pxValue) {
  @return #{calc(stripUnit($pxValue) / stripUnit($html-font-size))}rem;
}
// Миксин для медиазапросов 
@mixin media($minmax, $media) {

  @each $size,
  $resolution in $grid-breakpoints {
    @if $media ==$size {
      @media only screen and (#{$minmax}-width: $resolution) {
        @content;
      }
    }
  }
}

// Миксин адаптивный шрифт
@mixin adaptiv_font($pcSize, $mobSize) {
  $maxWidth: 1320;
  $addSize: $pcSize - $mobSize;
  $maxWidth: $maxWidth - 320;
  font-size: calc(#{$mobSize + px} + #{$addSize} * ((100vw - 320px) / #{$maxWidth}));
}

// Миксин колонки
@mixin col($size) {
  flex: 0 0 auto;
  width: (#{percentage(calc($size / $grid-columns))});
  padding-right: #{$grid-gap-side};
  padding-left: #{$grid-gap-side};
}

// Миксин для генерации медиазапросов колонок 
@mixin media_query($width) {
  @media(min-width: $width) {
    @content;
  }
}
@mixin media_max($width){
  @media(max-width: $width) {
    @content;
  }
}

// Помощник генерации
@mixin bp($name) {
  $width: map-get($grid-breakpoints, $name);

  @include media_query($width) {
    @content;
  }
}

// container
@mixin container {
  margin: 0 auto;
  max-width: $container-max-width;
  padding-left: $grid-gap-side;
  padding-right: $grid-gap-side;
}

// row
@mixin row {
  display: flex;
  flex-wrap: wrap;

  >* {
    flex-shrink: 0;
    padding-left: $grid-gap-side;
    padding-right: $grid-gap-side;
    max-width: 100%;
  }
}
// Для Retina Display, чтобы background был x2
@mixin image-2x($image, $width, $height) {

  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
    background-size: $width $height;
  }
}

@mixin color($parameter, $variable){
  #{$parameter}: var(--color-#{$variable});
}
@mixin font($weight, $size, $line){
  font-weight: #{$weight};
  font-size: #{$size};
  line-height: #{$line};
}

//Mixin for add responsible font-size/line-height properties
@mixin font-size-get($tag) {
  $number-of-breakpoints: 4;
  $ratio-key-number: $number-of-breakpoints + 1;
  $letter-spacing-key-number: $number-of-breakpoints + 2;
  $hasTag: map-has-key($font-sizes, $tag);
  $sizes: if(map-has-key($font-sizes, $tag), map-get($font-sizes, $tag), '1px');
  $ratio: nth($sizes, $ratio-key-number);
  $letterSpacing: nth($sizes, $letter-spacing-key-number);
  $type-of-ratio: type-of($ratio);
  $i: 0;
  @each $size in $sizes {
      $i: $i+1;
      $b: nth($sizes, $i);

      @if ($i <= $number-of-breakpoints) {
          $brakpoints-keys: map-keys($grid-breakpoints);
          @media (min-width: map-get($grid-breakpoints, nth($brakpoints-keys, $i))) {
              font-size: $b  + px;
              letter-spacing: $letterSpacing + em;
              @if ($type-of-ratio == 'list') {
                  $lh: nth($ratio, $i);
                  line-height: $lh;
              }
              @if ($type-of-ratio == 'number') {
                  line-height: $ratio;
              }
          }
      }
  }
}

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $grid-breakpoints
@mixin respond-from($breakpoint) {
  // If the key exists in the map
  @if map-has-key($grid-breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (min-width: map-get($grid-breakpoints, $breakpoint)) {
          @content;
      }
  }
      // If the key doesn't exist in the map
  @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
      + "Available breakpoints are: #{map-keys($breakpoints)}.";
  }
}

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $grid-breakpoints
@mixin respond-to($breakpoint) {
  // If the key exists in the map
  @if map-has-key($grid-breakpoints, $breakpoint) {
      // Prints a media query based on the value
      @media (max-width: (map-get($grid-breakpoints, $breakpoint) - 1)) {
          @content;
      }
  }
      // If the key doesn't exist in the map
  @else {
      @warn "Unfortunately, no value could be retrieved from `#{$grid-breakpoints}`. "
      + "Available breakpoints are: #{map-keys($grid-breakpoints)}.";
  }
}

/// Mixin to manage responsive breakpoints
/// @param {String} $breakpoint - Breakpoint name
/// @require $grid-breakpoints
@mixin respond-from-to($breakpoint-from, $breakpoint-to) {
  // If the key exists in the map
  @if map-has-key($grid-breakpoints, $breakpoint-from) and map_has_key($grid-breakpoints, $breakpoint-to) {
      // Prints a media query based on the value
      @media (min-width: map-get($grid-breakpoints, $breakpoint-from)) and (max-width: (map_get($grid-breakpoints, $breakpoint-to) - 1)) {
          @content;
      }
  }
      // If the key doesn't exist in the map
  @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint-from}` or `#{$breakpoint-to}`. "
      + "Available breakpoints are: #{map-keys($grid-breakpoints)}.";
  }
}
@mixin font($size, $weight, $line){
  font-size: #{$size};
  font-weight: #{$weight};
  line-height: #{$line};
}